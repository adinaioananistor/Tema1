1.

Write a function that takes an ordered list of numbers (a list where the elements are in order from smallest to largest) and another number. 
The function decides whether or not the given number is inside the list and returns (then prints) an appropriate boolean.

2.

Write a program that takes a list of numbers (for example, a = [5, 10, 15, 20, 25]) and makes a new list of only the first and last elements of the given list. For practice, write this code inside a function.

3. 

Take a list, say for example this one:

  a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
and write a program that prints out all the elements of the list that are less than 5.

Extras:

-Instead of printing the elements one by one, make a new list that has all the elements less than 5 from this list in it and print out this new list.
-Ask the user for a number and return a list that contains only elements from the original list a that are smaller than that number given by the user.

4.

Ask the user for a string and print out whether this string is a palindrome or not. 
(A palindrome is a string that reads the same forwards and backwards.)

5.

Write a program that asks the user how many Fibonnaci numbers to generate and then generates them. Take this opportunity to think about how you can use functions.
 Make sure to ask the user to enter the number of numbers in the sequence to generate.
(Hint: The Fibonnaci seqence is a sequence of numbers where the next number in the sequence is the sum of the previous two numbers in the sequence. The sequence looks like this: 1, 1, 2, 3, 5, 8, 13, …)

6.

Create a program that asks the user for a number and then prints out a list of all the divisors of that number. 
(If you don’t know what a divisor is, it is a number that divides evenly into another number. For example, 13 is a divisor of 26 because 26 / 13 has no remainder.)


7.

Write a password generator in C#. Be creative with how you generate passwords - strong passwords have a mix of lowercase letters, uppercase letters, numbers, and symbols.
 The passwords should be random, generating a new password every time the user asks for a new password.
 
8.


Create a program that will play the “cows and bulls” game with the user. The game works like this:

Randomly generate a 4-digit number. Ask the user to guess a 4-digit number. For every digit that the user guessed correctly in the correct place, they have a “cow”. For every digit the user guessed correctly in the wrong place is a “bull.” Every time the user makes a guess, tell them how many “cows” and “bulls” they have. Once the user guesses the correct number, the game is over. Keep track of the number of guesses the user makes throughout teh game and tell the user at the end.

Say the number generated by the computer is 1038. An example interaction could look like this:

  Welcome to the Cows and Bulls Game! 
  Enter a number: 
  >>> 1234
  2 cows, 0 bulls
  >>> 1256
  1 cow, 1 bull
  ...
Until the user guesses the number.

9.


Write a program (using functions!) that asks the user for a long string containing multiple words. Print back to the user the same string, except with the words in backwards order. For example, say I type the string:

  My name is Michele
Then I would see the string:

  Michele is name My
shown back to me.


10. 


Write a program that takes an integer N as input and creates a list of consecutive numbers that is of length N => example :  N = 4 -> list is [0,1,2,3]
Then, shuffle the list randomly so that it is no longer ordered. example [0,1,2,3] -> [3,0,2,1]

The program must shuffle the list differently each time it is run.

11. 

Given the video as help: https://www.youtube.com/watch?v=MZaf_9IZCrc

Understand and implement the Quicksort algorithm

12. 

Find a way to do a performance benchmark on Bubble Sort and compare it to Quicksort...use timers

13. 

Write a program that automatically converts English text to Morse code and vice versa.

14. 

Write a program that finds the longest palindromic substring of a given string. Try to be as efficient as possible!

15.

Given two strings, write a program that efficiently finds the longest common subsequence.

